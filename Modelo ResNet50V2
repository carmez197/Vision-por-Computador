#guardamos el modelo para utilizarlo con otra aplicacion
# Nombre que le colocamos al modelo
name = 'ResNet50V2-Colombia-billetes'

# Pre entrenamos el modelo
base_model = ResNet50V2(include_top=False, input_shape=(256,256,3), weights='imagenet')

# Freeze Weights
base_model.trainable = False

# Model Architecture
model = Sequential([
    base_model,
    GAP(),
    Dense(256, activation='relu', kernel_initializer='he_normal'),
    Dense(n_classes, activation='softmax')
], name=name)

# Callbacks 
cbs = [EarlyStopping(patience=3, restore_best_weights=True), ModelCheckpoint(name+'.keras', save_best_only=True)]

# Compiling Model
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

history = model.fit(train_ds, validation_data=valid_ds, callbacks=cbs, epochs=10)

#Medidas del proyecto

plt.figure(figsize=(8, 8))

epochs_range= range(10)

plt.plot( epochs_range, history.history['accuracy'], label="Training Accuracy")

plt.plot(epochs_range, history.history['val_accuracy'], label="Validation Accuracy")

plt.axis(ymin=0.5,ymax=1.2)

plt.grid()

plt.title('Model Accuracy')

plt.ylabel('Accuracy')

plt.xlabel('Epochs')

plt.legend(['train', 'validation'])

plt.show()
